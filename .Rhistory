sum(Creative$Proportion[which(Creative$Postcode==k)]*Creative[which(Creative$Postcode==k), name])
}
## Loading in in-house data
Claims <- read.csv("UNSW_claims_data.csv", header = TRUE)
Claims <- Claims %>% filter(claim_paid != 0)
Earned <- read.csv("UNSW_earned_data_adjusted_Sep27.csv", header = TRUE)
Earned <- Earned %>%
arrange(Earned$exposure_id) %>%
rename(temp1 = pet_de_sexed, temp2 = pet_de_sexed_age, temp3 = pet_is_switcher)
## Adding column names to the external dataset with Postcode key
colnames(External) <- c("nb_postcode", colnames(External[,-1]))
Earned <- right_join(Earned, External, by = "nb_postcode")
attach(Earned)
## Standard imputing missing values with medians
Earned$owner_age_years[which(is.na(Earned$owner_age_years))] <- median(Earned$owner_age_years, na.rm = TRUE)
## Combining pet de sexed variables to be more compact
Earned <- Earned %>%
mutate(pet_de_sexed = factor(substr(temp2, 1, 3), levels = c("", "0-3", "4-6", "7-1", "1-2", "2+ ", "Not"),
labels = c("Not Desexed", "Desexed 0 - 3 months old",
"Desexed 4 - 6 months old", "Desexed 7 - 12 months old",
"Desexed 13 - 24 months old", "Desexed past 24 months",
"Desexed at unknown age"), ordered = TRUE),
pet_is_switcher = ifelse(temp3 == "true", TRUE, FALSE)) %>%
## Removing irrelevant variables
dplyr::select(-c(UW_Date, pet_age_years, nb_policy_first_inception_date,
nb_suburb, person_dob, quote_date, row_num, temp1, temp2, temp3,
nb_number_of_breeds, `Yr11+_Completion`, IRSAD, WFH_Ratio,
nb_breed_name_unique, nb_breed_name_unique_concat, exposure_id_1,
nb_postcode, nb_contribution_excess, X))
## Removing extreme outlier datapoint
Earned <- Earned %>% filter(exposure_id != "exposure_b0bf09b8-b3a5-483f-9fba-02d91a323690")
## Condensing information to be more interpretable
Earned$nb_breed_trait[which(Earned$nb_breed_trait == "" | Earned$nb_breed_trait == "unknown")] <- "cross (unofficial)"
#### Creating three variations of the Earned + External + Claims merged dataset
Exposure <- Earned %>% dplyr::select(exposure_id, earned_units) %>%
group_by(exposure_id) %>% summarise(exposure_id = unique(exposure_id),
earned_units = sum(earned_units))
Earned <- Earned[-which(duplicated(Earned$exposure_id)),]
Earned <- Earned %>% dplyr::select(-c(tenure, lead_date_day, earned_units))
Earned <- left_join(Earned, Exposure, by = "exposure_id")
detach(Earned)
attach(Claims)
Claims <- Claims %>% dplyr::select(-c(claim_start_date, claim_id)) %>% arrange(exposure_id) %>%
filter(exposure_id != "exposure_b0bf09b8-b3a5-483f-9fba-02d91a323690")
Claim_count <- table(Claims$exposure_id)
Claim_count <- as.data.frame(Claim_count)
colnames(Claim_count) <- c("exposure_id", "Count")
Earned1 <- right_join(Earned, Claim_count, by = "exposure_id")
Earned1$Count[which(is.na(Earned$Count))] <- 0
Earned1 <- Earned1 %>% dplyr::select(-exposure_id)
Claim_shortened <- as.data.frame(Claims[,c("exposure_id", "claim_paid", "condition_category")])
Earned2 <- right_join(Earned, Claim_shortened, by = "exposure_id")
Earned2 <- Earned2 %>% dplyr::select(-earned_units) %>% rename(Individual_Claim = claim_paid)
Earned3 <- Earned2 %>% group_by(exposure_id) %>% summarise(Total_Claim = sum(Individual_Claim))
Earned3 <- right_join(Earned, Earned3, by = "exposure_id") %>% rename(temp = Total_Claim) %>%
mutate(Total_Per_Period = temp / earned_units) %>% dplyr::select(-c(temp, earned_units))
detach(Claims)
# write.csv(Earned1, "Earned1.csv", row.names = FALSE)
# write.csv(Earned2, "Earned2.csv", row.names = FALSE)
# write.csv(Earned3, "Earned3.csv", row.names = FALSE)
# Earned1: Earned with claims frequency
# Earned2: Earned with individualised claim values per policy
# Earned3: Earned with cumulative claim values per policy
## Removing unnecessary variable
Earned2 <- Earned2 %>% dplyr::select(-exposure_id)
Earned2 %>% ggplot() + geom_boxplot( mappin = aes(x = Individual_Claim, y = condition_category)) +
xlim(c(0, 2500))
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category))
## Treating factor variables as factors
list <- c(which(colnames(Earned2) %in% c("pet_gender", "nb_contribution",
"nb_excess", "nb_address_type_adj",
"nb_state", "nb_breed_type",
"is_multi_pet_plan", "quote_time_group",
"pet_is_switcher", "pet_de_sexed",
"nb_breed_trait", "condition_category")))
for(k in list){Earned2[,k] <- sapply(Earned2[,k], as.factor)}
#### 75 / 25 - Train / Valid Split
set.seed(35)
index <- sample(1:nrow(Earned2), ceiling(0.75*nrow(Earned2)), replace = FALSE)
X_train <- Earned2[index,] %>% dplyr::select(-condition_category)
Y_train <- Earned2$condition_category[index]
valid <- Earned2[-index,]
## Reformatting data into one hot representation for factors because SMOTE from
## performanceEstimation is inflexible
temp <- dummyVars(~., X_train)
X_train <- predict(temp, X_train)
X_train <- as.data.frame(X_train)
## Iteratively applying SMOTE two times, and resetting the majority class after
## each iteration
train <- cbind(X_train, Y_train)
ggplot() + geom_bar(mapping = aes(x = Y_train)) + ylim(0, 1500)
## Small knn for learning intricate details
## 100 to ensure quasi minority classes are not undersampled
train <- performanceEstimation::smote(Y_train ~., train, perc.over = 1, k = 3, perc.under = 100)
train <- train %>% filter(Y_train!= "Other" & Y_train != "Eyes & ears" & Y_train != "Gastrointestinal Issues" &
Y_train != "Injuries" & Y_train != "Ingestion" & Y_train != "Allergies & skin")
temp1 <- cbind(X_train, Y_train) %>% filter(Y_train == "Other" | Y_train == "Eyes & ears" | Y_train == "Gastrointestinal Issues" |
Y_train == "Injuries" | Y_train == "Ingestion" | Y_train == "Allergies & skin")
train <- rbind(train, temp1)
train %>% ggplot() + geom_bar(mapping = aes(x = Y_train)) + ylim(0, 1500)
## Larger knn to avoid excess learning on the synthetic data, for the minority classes
## 70 as a tradeoff between allowing extreme minority classes to keep data, and prevent
## priorly minority classes from having too many synthetic data points
train <- performanceEstimation::smote(Y_train ~., train, perc.over = 1, k = 5, perc.under = 70)
train <- train %>% filter(Y_train!= "Other" & Y_train != "Eyes & ears" & Y_train != "Gastrointestinal Issues" &
Y_train != "Injuries" & Y_train != "Ingestion" & Y_train != "Allergies & skin")
temp1 <- cbind(X_train, Y_train) %>% filter(Y_train == "Other" | Y_train == "Eyes & ears" | Y_train == "Gastrointestinal Issues" |
Y_train == "Injuries" | Y_train == "Ingestion" | Y_train == "Allergies & skin")
train <- rbind(train, temp1)
train %>% ggplot() + geom_bar(mapping = aes(x = Y_train)) + ylim(0, 1500)
## Beginning to reformat data into compact form, out of one hot representation
factors <- names(which(sapply(Earned2, is.factor) == TRUE))
numeric <- names(which(sapply(Earned2, is.factor) != TRUE))
## Functions to transform one hot encoded variables back into compact factor form
Decode <- function(k){
apply(train[,which(str_detect(factors[k], substr(colnames(train), 2, nchar(factors[k])))), drop = FALSE], 1, function(row){
sub("^[.]", "", gsub(factors[k], "", names(which.max(row))))})}
Encode <- function(var, ordered = FALSE){factor(Decode(which(factors == var)), levels = unique(Decode(which(factors == var))),
labels = unique(Decode(which(factors == var))), ordered = ordered)}
## Placeholder
X_train <- as.data.frame(matrix(NA, nrow = nrow(train), ncol = ncol(Earned2)))
colnames(X_train) <- colnames(Earned2)
### Reforming data
X_train$pet_gender <- Encode("pet_gender")
X_train$pet_age_months <- train$pet_age_months
X_train$nb_contribution <- Encode("nb_contribution")
X_train$nb_excess <- Encode("nb_excess")
X_train$nb_address_type_adj <- Encode("nb_address_type_adj")
X_train$nb_state <- Encode("nb_state")
X_train$owner_age_years <- train$owner_age_years
X_train$nb_average_breed_size <- train$nb_average_breed_size
X_train$nb_breed_type <- Encode("nb_breed_type")
X_train$nb_breed_trait <- Encode("nb_breed_trait")
X_train$is_multi_pet_plan <- Encode("is_multi_pet_plan")
X_train$quote_time_group <- Encode('quote_time_group')
X_train$Med_Equiv_Income <- train$Med_Equiv_Income
X_train$pet_de_sexed <- Encode("pet_de_sexed")
X_train$pet_is_switcher <- Encode("pet_is_switcher")
X_train$Individual_Claim <- train$Individual_Claim
X_train$condition_category <- train$Y_train
train <- X_train
## Grouping of condition categories
# Ailment     : Routine Care and Examinations, Allergies & skin, Eyes & ears, Illness, Behavioral Issues
# Digestive   : Gastrointestinal Issues, Ingestion
# Skeletal    : Injuries, Ortho
# Dental      : Dental
# Other       : Other
train <- train %>% rename(temp = condition_category) %>%
mutate(condition_category = ifelse(temp == "Routine Care and Examinations" |
temp == "Allergies & skin" |
temp == "Eyes & ears" |
temp == "Illness" |
temp == "Behavioral Issues", "Ailment",
ifelse(temp == "Gastrointestinal Issues" |
temp == "Ingestion", "Digestive",
ifelse(temp == "Injuries" |
temp == "Ortho", "Skeletal",
ifelse(temp == "Other", "Other",
ifelse(temp == "Dental", "Dental", "")))))) %>%
dplyr::select(-temp)
valid <- valid %>% rename(temp = condition_category) %>%
mutate(condition_category = ifelse(temp == "Routine Care and Examinations" |
temp == "Allergies & skin" |
temp == "Eyes & ears" |
temp == "Illness" |
temp == "Behavioral Issues", "Ailment",
ifelse(temp == "Gastrointestinal Issues" |
temp == "Ingestion", "Digestive",
ifelse(temp == "Injuries" |
temp == "Ortho", "Skeletal",
ifelse(temp == "Other", "Other",
ifelse(temp == "Dental", "Dental", "")))))) %>%
dplyr::select(-temp)
## Reapplying factor type to condition_category
train$condition_category <- sapply(train$condition_category, as.factor)
valid$condition_category <- sapply(valid$condition_category, as.factor)
# train %>% write.csv("severity_train.csv", row.names = FALSE)
# valid %>% write.csv("severity_valid.csv", row.names = FALSE)
#### Creating the new dataset to predict with
new <- read.csv("New_Customers_Pricing_Output_File.csv", header = TRUE)
setwd("C:/Users/cymon/OneDrive/Documents/GitHub/ACTL3143") # Personal Working Directory
library(tidyverse)
library(stringr)
library(readxl)
library(ggthemes)
library(doParallel)               # Efficiency
library(ModelMetrics)             # Metric calculation
library(caret)                    # Hyperparameter tuning
library(Matrix)                   # One Hot Encoding
library(performanceEstimation)    # SMOTE
library(lime)                     # Locally Interprettable Model-Agnostic Explanations
library(pscl)                     # Zero Inflated Poisson
library(MASS)                     # Negative Binomial
library(randomForest)             # Random Forest
library(xgboost)                  #
library(glmnet)                   # Multinomial logistic
library(h2o)                      # GBM modelling
# The important datasets will be
## Earned1 / Earned2 / Earned3
## https://data.gov.au/dataset/ds-dga-2c79581f-600e-4560-80a8-98adb1922dfc/details?q=ASGS%20Correspondence
## 2021 Mapping between SA2 and Postcodes
Mapping <- read_xlsx("Correspondence_SA2_Postcode_2021.xlsx") #
Mapping <- as.data.frame(sapply(Mapping, as.numeric))
Mapping <- Mapping[,c(1,2,4)]
colnames(Mapping) <- c("Postcode", "SA2", "Proportion")
## Loading in external data
Creative <- read_xlsx("Creative.xlsx", sheet = "Full")
Support <- read_xlsx("Creative.xlsx", sheet = "Supporting")
Support <- Support %>% filter(Year == 2021)
## selecting data from 2021 and standard imputing missing values with medians
Creative <- Creative %>% filter(Year == 2021) %>% dplyr::select(-c(Label, Year))
Creative <- as.data.frame(sapply(Creative, as.numeric))
for(k in 2:5){Creative[which(is.na(Creative[,k])|Creative[,k]==""|Creative[,k]=="-"),k] <- median(Creative[,k], na.rm = TRUE)}
## Combining external dataset with SA2 key
Creative <- left_join(Creative, Mapping, by = "SA2")
# Converting SA2 key into Postcode key by using proportional weights
External <- as.data.frame(unique(Creative$Postcode)) %>% rename(Postcode = `unique(Creative$Postcode)`)
for(k in unique(Creative$Postcode)){
for(name in c("Yr11+_Completion", "WFH_Ratio", "Med_Equiv_Income", "IRSAD"))
External[which(External$Postcode==k), name] <-
sum(Creative$Proportion[which(Creative$Postcode==k)]*Creative[which(Creative$Postcode==k), name])
}
## Loading in in-house data
Claims <- read.csv("UNSW_claims_data.csv", header = TRUE)
Claims <- Claims %>% filter(claim_paid != 0)
Earned <- read.csv("UNSW_earned_data_adjusted_Sep27.csv", header = TRUE)
Earned <- Earned %>%
arrange(Earned$exposure_id) %>%
rename(temp1 = pet_de_sexed, temp2 = pet_de_sexed_age, temp3 = pet_is_switcher)
## Adding column names to the external dataset with Postcode key
colnames(External) <- c("nb_postcode", colnames(External[,-1]))
Earned <- right_join(Earned, External, by = "nb_postcode")
attach(Earned)
## Standard imputing missing values with medians
Earned$owner_age_years[which(is.na(Earned$owner_age_years))] <- median(Earned$owner_age_years, na.rm = TRUE)
## Combining pet de sexed variables to be more compact
Earned <- Earned %>%
mutate(pet_de_sexed = factor(substr(temp2, 1, 3), levels = c("", "0-3", "4-6", "7-1", "1-2", "2+ ", "Not"),
labels = c("Not Desexed", "Desexed 0 - 3 months old",
"Desexed 4 - 6 months old", "Desexed 7 - 12 months old",
"Desexed 13 - 24 months old", "Desexed past 24 months",
"Desexed at unknown age"), ordered = TRUE),
pet_is_switcher = ifelse(temp3 == "true", TRUE, FALSE)) %>%
## Removing irrelevant variables
dplyr::select(-c(UW_Date, pet_age_years, nb_policy_first_inception_date,
nb_suburb, person_dob, quote_date, row_num, temp1, temp2, temp3,
nb_number_of_breeds, `Yr11+_Completion`, IRSAD, WFH_Ratio,
nb_breed_name_unique, nb_breed_name_unique_concat, exposure_id_1,
nb_postcode, nb_contribution_excess, X))
## Removing extreme outlier datapoint
Earned <- Earned %>% filter(exposure_id != "exposure_b0bf09b8-b3a5-483f-9fba-02d91a323690")
## Condensing information to be more interpretable
Earned$nb_breed_trait[which(Earned$nb_breed_trait == "" | Earned$nb_breed_trait == "unknown")] <- "cross (unofficial)"
#### Creating three variations of the Earned + External + Claims merged dataset
Exposure <- Earned %>% dplyr::select(exposure_id, earned_units) %>%
group_by(exposure_id) %>% summarise(exposure_id = unique(exposure_id),
earned_units = sum(earned_units))
Earned <- Earned[-which(duplicated(Earned$exposure_id)),]
Earned <- Earned %>% dplyr::select(-c(tenure, lead_date_day, earned_units))
Earned <- left_join(Earned, Exposure, by = "exposure_id")
detach(Earned)
attach(Claims)
Claims <- Claims %>% dplyr::select(-c(claim_start_date, claim_id)) %>% arrange(exposure_id) %>%
filter(exposure_id != "exposure_b0bf09b8-b3a5-483f-9fba-02d91a323690")
Claim_count <- table(Claims$exposure_id)
Claim_count <- as.data.frame(Claim_count)
colnames(Claim_count) <- c("exposure_id", "Count")
Earned1 <- right_join(Earned, Claim_count, by = "exposure_id")
Earned1$Count[which(is.na(Earned$Count))] <- 0
Earned1 <- Earned1 %>% dplyr::select(-exposure_id)
Claim_shortened <- as.data.frame(Claims[,c("exposure_id", "claim_paid", "condition_category")])
Earned2 <- right_join(Earned, Claim_shortened, by = "exposure_id")
Earned2 <- Earned2 %>% dplyr::select(-earned_units) %>% rename(Individual_Claim = claim_paid)
Earned3 <- Earned2 %>% group_by(exposure_id) %>% summarise(Total_Claim = sum(Individual_Claim))
Earned3 <- right_join(Earned, Earned3, by = "exposure_id") %>% rename(temp = Total_Claim) %>%
mutate(Total_Per_Period = temp / earned_units) %>% dplyr::select(-c(temp, earned_units))
detach(Claims)
# write.csv(Earned1, "Earned1.csv", row.names = FALSE)
# write.csv(Earned2, "Earned2.csv", row.names = FALSE)
# write.csv(Earned3, "Earned3.csv", row.names = FALSE)
# Earned1: Earned with claims frequency
# Earned2: Earned with individualised claim values per policy
# Earned3: Earned with cumulative claim values per policy
## Removing unnecessary variable
Earned2 <- Earned2 %>% dplyr::select(-exposure_id)
Earned2 %>% ggplot() + geom_boxplot( mappin = aes(x = Individual_Claim, y = condition_category)) +
xlim(c(0, 2500))
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category))
## Treating factor variables as factors
list <- c(which(colnames(Earned2) %in% c("pet_gender", "nb_contribution",
"nb_excess", "nb_address_type_adj",
"nb_state", "nb_breed_type",
"is_multi_pet_plan", "quote_time_group",
"pet_is_switcher", "pet_de_sexed",
"nb_breed_trait", "condition_category")))
for(k in list){Earned2[,k] <- sapply(Earned2[,k], as.factor)}
#### 75 / 25 - Train / Valid Split
set.seed(35)
index <- sample(1:nrow(Earned2), ceiling(0.75*nrow(Earned2)), replace = FALSE)
X_train <- Earned2[index,] %>% dplyr::select(-condition_category)
Y_train <- Earned2$condition_category[index]
valid <- Earned2[-index,]
## Reformatting data into one hot representation for factors because SMOTE from
## performanceEstimation is inflexible
temp <- dummyVars(~., X_train)
X_train <- predict(temp, X_train)
X_train <- as.data.frame(X_train)
## Iteratively applying SMOTE two times, and resetting the majority class after
## each iteration
train <- cbind(X_train, Y_train)
ggplot() + geom_bar(mapping = aes(x = Y_train)) + ylim(0, 1500)
## Small knn for learning intricate details
## 100 to ensure quasi minority classes are not undersampled
train <- performanceEstimation::smote(Y_train ~., train, perc.over = 1, k = 3, perc.under = 100)
train <- train %>% filter(Y_train!= "Other" & Y_train != "Eyes & ears" & Y_train != "Gastrointestinal Issues" &
Y_train != "Injuries" & Y_train != "Ingestion" & Y_train != "Allergies & skin")
temp1 <- cbind(X_train, Y_train) %>% filter(Y_train == "Other" | Y_train == "Eyes & ears" | Y_train == "Gastrointestinal Issues" |
Y_train == "Injuries" | Y_train == "Ingestion" | Y_train == "Allergies & skin")
train <- rbind(train, temp1)
train %>% ggplot() + geom_bar(mapping = aes(x = Y_train)) + ylim(0, 1500)
## Larger knn to avoid excess learning on the synthetic data, for the minority classes
## 70 as a tradeoff between allowing extreme minority classes to keep data, and prevent
## priorly minority classes from having too many synthetic data points
train <- performanceEstimation::smote(Y_train ~., train, perc.over = 1, k = 5, perc.under = 70)
train <- train %>% filter(Y_train!= "Other" & Y_train != "Eyes & ears" & Y_train != "Gastrointestinal Issues" &
Y_train != "Injuries" & Y_train != "Ingestion" & Y_train != "Allergies & skin")
temp1 <- cbind(X_train, Y_train) %>% filter(Y_train == "Other" | Y_train == "Eyes & ears" | Y_train == "Gastrointestinal Issues" |
Y_train == "Injuries" | Y_train == "Ingestion" | Y_train == "Allergies & skin")
train <- rbind(train, temp1)
train %>% ggplot() + geom_bar(mapping = aes(x = Y_train)) + ylim(0, 1500)
## Beginning to reformat data into compact form, out of one hot representation
factors <- names(which(sapply(Earned2, is.factor) == TRUE))
numeric <- names(which(sapply(Earned2, is.factor) != TRUE))
## Functions to transform one hot encoded variables back into compact factor form
Decode <- function(k){
apply(train[,which(str_detect(factors[k], substr(colnames(train), 2, nchar(factors[k])))), drop = FALSE], 1, function(row){
sub("^[.]", "", gsub(factors[k], "", names(which.max(row))))})}
Encode <- function(var, ordered = FALSE){factor(Decode(which(factors == var)), levels = unique(Decode(which(factors == var))),
labels = unique(Decode(which(factors == var))), ordered = ordered)}
## Placeholder
X_train <- as.data.frame(matrix(NA, nrow = nrow(train), ncol = ncol(Earned2)))
colnames(X_train) <- colnames(Earned2)
### Reforming data
X_train$pet_gender <- Encode("pet_gender")
X_train$pet_age_months <- train$pet_age_months
X_train$nb_contribution <- Encode("nb_contribution")
X_train$nb_excess <- Encode("nb_excess")
X_train$nb_address_type_adj <- Encode("nb_address_type_adj")
X_train$nb_state <- Encode("nb_state")
X_train$owner_age_years <- train$owner_age_years
X_train$nb_average_breed_size <- train$nb_average_breed_size
X_train$nb_breed_type <- Encode("nb_breed_type")
X_train$nb_breed_trait <- Encode("nb_breed_trait")
X_train$is_multi_pet_plan <- Encode("is_multi_pet_plan")
X_train$quote_time_group <- Encode('quote_time_group')
X_train$Med_Equiv_Income <- train$Med_Equiv_Income
X_train$pet_de_sexed <- Encode("pet_de_sexed")
X_train$pet_is_switcher <- Encode("pet_is_switcher")
X_train$Individual_Claim <- train$Individual_Claim
X_train$condition_category <- train$Y_train
train <- X_train
## Grouping of condition categories
# Ailment     : Routine Care and Examinations, Allergies & skin, Eyes & ears, Illness, Behavioral Issues
# Digestive   : Gastrointestinal Issues, Ingestion
# Skeletal    : Injuries, Ortho
# Dental      : Dental
# Other       : Other
train <- train %>% rename(temp = condition_category) %>%
mutate(condition_category = ifelse(temp == "Routine Care and Examinations" |
temp == "Allergies & skin" |
temp == "Eyes & ears" |
temp == "Illness" |
temp == "Behavioral Issues", "Ailment",
ifelse(temp == "Gastrointestinal Issues" |
temp == "Ingestion", "Digestive",
ifelse(temp == "Injuries" |
temp == "Ortho", "Skeletal",
ifelse(temp == "Other", "Other",
ifelse(temp == "Dental", "Dental", "")))))) %>%
dplyr::select(-temp)
valid <- valid %>% rename(temp = condition_category) %>%
mutate(condition_category = ifelse(temp == "Routine Care and Examinations" |
temp == "Allergies & skin" |
temp == "Eyes & ears" |
temp == "Illness" |
temp == "Behavioral Issues", "Ailment",
ifelse(temp == "Gastrointestinal Issues" |
temp == "Ingestion", "Digestive",
ifelse(temp == "Injuries" |
temp == "Ortho", "Skeletal",
ifelse(temp == "Other", "Other",
ifelse(temp == "Dental", "Dental", "")))))) %>%
dplyr::select(-temp)
## Reapplying factor type to condition_category
train$condition_category <- sapply(train$condition_category, as.factor)
valid$condition_category <- sapply(valid$condition_category, as.factor)
# train %>% write.csv("severity_train.csv", row.names = FALSE)
# valid %>% write.csv("severity_valid.csv", row.names = FALSE)
train <- Earned2[index,]
# Code chunk for generating report plots and interpretable explanations
train %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
ggthemes::theme_fivethirtyeight() + ylim(0, 1500) + xlab("Condition Categories") +
ylab("") + theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust=0),
legend.title=element_blank()) + scale_fill_brewer(palette = "Set3") +   ggtitle("Frequency of Claim Types")
train %>% ggplot() + geom_boxplot(mapping = aes(x = Individual_Claim, fill = condition_category)) +
ggthemes::theme_fivethirtyeight() +
xlim(c(0, 5000)) + ggtitle("Distributions of Individual Claims by Claim Type") +
xlab("Individual Claim") + theme(axis.text.y = element_blank(),
legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
train %>% ggplot() + geom_point(mapping = aes(x = log(pet_age_months), y = Individual_Claim))
Earned1 %>% ggplot() + geom_violin(mapping = aes(x = nb_breed_trait, y = Count/earned_units)) +
ggthemes::theme_fivethirtyeight() + ggtitle("Distribution of claim frequencies by breed") +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust=0))
Earned3 %>% ggplot() + geom_histogram(mapping = aes(x = Total_Per_Period, fill = nb_breed_trait), bins = 25) + xlim(0, 2000) +
facet_wrap(~nb_breed_trait) + ggthemes::theme_fivethirtyeight() + ggtitle("Histogram of claim severities by breed") +
scale_y_continuous(breaks = seq(0,200, 100)) + theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set2")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set1")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme() +
scale_fill_brewer(palette = "Set3")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
train %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
ggthemes::theme_fivethirtyeight() + ylim(0, 1500) + xlab("Condition Categories") +
ylab("") + theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust=0),
legend.title=element_blank()) + scale_fill_brewer(palette = "Set3") +   ggtitle("Frequency of Claim Types")
train %>% ggplot() + geom_boxplot(mapping = aes(x = Individual_Claim, fill = condition_category)) +
ggthemes::theme_fivethirtyeight() +
xlim(c(0, 5000)) + ggtitle("Distributions of Individual Claims by Claim Type") +
xlab("Individual Claim") + theme(axis.text.y = element_blank(),
legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
train %>% ggplot() + geom_point(mapping = aes(x = log(pet_age_months), y = Individual_Claim))
Earned1 %>% ggplot() + geom_violin(mapping = aes(x = nb_breed_trait, y = Count/earned_units)) +
ggthemes::theme_fivethirtyeight() + ggtitle("Distribution of claim frequencies by breed") +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust=0))
Earned3 %>% ggplot() + geom_histogram(mapping = aes(x = Total_Per_Period, fill = nb_breed_trait), bins = 25) + xlim(0, 2000) +
facet_wrap(~nb_breed_trait) + ggthemes::theme_fivethirtyeight() + ggtitle("Histogram of claim severities by breed") +
scale_y_continuous(breaks = seq(0,200, 100)) + theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
Earned3 %>% ggplot() + geom_histogram(mapping = aes(x = Total_Per_Period, fill = nb_breed_trait), bins = 25) + xlim(0, 2000) +
facet_wrap(~nb_breed_trait) + ggthemes::theme_fivethirtyeight() + ggtitle("Histogram of claim severities by breed") +
scale_y_continuous(breaks = seq(0,200, 100)) + theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
Earned2 %>% ggplot() + geom_bar(mapping = aes(x = condition_category, fill = condition_category)) +
facet_wrap(~nb_breed_trait) + xlab("") +
scale_x_discrete(breaks = "") + ggthemes::theme_fivethirtyeight() +
ggtitle("Mapping of ailment by breed trait") +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette = "Set3")
